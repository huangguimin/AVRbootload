;/*****************************************************
;采用串行接口实现Boot_load应用的实例
;改编自华东师大电子系马老师mega128 bootloader
;Compiler:    CodeVisionAVR
;Target:      Mega16
;Crystal:     4Mhz
;波特率：     9600
;Used:        USART
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#define SPM_PAGESIZE 256                //M16的一个Flash页为128字节(64字)
;#define DATA_BUFFER_SIZE SPM_PAGESIZE   //定义接收缓冲区长度
;
;//定义全局变量
;unsigned char data[DATA_BUFFER_SIZE];
;unsigned int address =0;           //R5高位，R4低位
;unsigned int flshdata=0;           //R7高位，R6低位
;unsigned char aaa,bbb;
;
;void uart_init()
; 0000 0017 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0018  /* UBRRH = 0x00;         //初始化M16的USART
; 0000 0019   UBRRL = 0x33;
; 0000 001A   UCSRB = 0x18;
; 0000 001B   UCSRC = 0x86;
; 0000 001C   UCSRA = 0x22; */
; 0000 001D   //初始化M128的USART0
; 0000 001E     UBRR0H = 0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001F     UBRR0L = 0x33;            //Set baud rate
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0020     UCSR0B = 0x18;            //Enable Receiver and Transmitter
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0021     UCSR0C = 0x0E;            //Set frame. format: 8data, 2stop bit
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0022 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;void print_face()
; 0000 0025 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0026   UDR0   = 0x5E;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0027   delay_ms(100);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0028   UCSR0A = 0x22;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0029   UDR0   = 0x5F;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002A   delay_ms(100);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002B   UCSR0A = 0x22;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002C   UDR0   = 0x5E;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002D   delay_ms(100);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002E   UCSR0A = 0x22;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002F }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;//擦除(code=0x03)和写入(code=0x05)一个Flash页
;void boot_page_ew(unsigned char code)
; 0000 0032 {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0033     SPMCR = code;                    //寄存器SPMCSR中为操作码
;	code -> Y+0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0034     #asm
;PCODE: $00000036 VOL: 0
; 0000 0035      MOV r30,r4
     MOV r30,r4
;PCODE: $00000037 VOL: 0
; 0000 0036      mov r31,r5
     mov r31,r5
;PCODE: $00000038 VOL: 0
; 0000 0037      spm
     spm
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0038     #endasm                          //对指定Flash页进行操作
; 0000 0039 }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;
;//填充Flash缓冲页中的一个字
;void boot_page_fill(void)
; 0000 003D {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003E     #asm
;PCODE: $00000040 VOL: 0
; 0000 003F      MOV r0, r6
     MOV r0, r6
;PCODE: $00000041 VOL: 0
; 0000 0040      MOV r1, r7
     MOV r1, r7
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0041     #endasm                  //R0R1中为一个指令字
; 0000 0042     SPMCR = 0x01;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0043     #asm
;PCODE: $00000046 VOL: 0
; 0000 0044      MOV r30,r4
     MOV r30,r4
;PCODE: $00000047 VOL: 0
; 0000 0045      MOV r31,r5
     MOV r31,r5
;PCODE: $00000048 VOL: 0
; 0000 0046      spm
     spm
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0047     #endasm
; 0000 0048 }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;
;//等待一个Flash页的写完成
;void wait_page_rw_ok(void)
; 0000 004C {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 004D       while(SPMCR & 0x40)
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004E      {
; 0000 004F          while(SPMCR & 0x01);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0050          SPMCR = 0x11;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0051              #asm
;PCODE: $0000005B VOL: 0
; 0000 0052               spm
              spm
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0053              #endasm
; 0000 0054      }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0055 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;
;//更新一个Flash页的完整处理
;void write_one_page(void)
; 0000 005A {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005B     int i;
; 0000 005C     boot_page_ew(0x03);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;	i -> R16,R17
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 005D     wait_page_rw_ok();
;PCODE: $00000069 VOL: 0
; 0000 005E     for(i=0;i<SPM_PAGESIZE;i+=2)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 005F     {
; 0000 0060      aaa=data[i];
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0061      bbb=data[i+1];
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0062      #asm
;PCODE: $0000007A VOL: 0
; 0000 0063       MOV r7,r8
      MOV r7,r8
;PCODE: $0000007B VOL: 0
; 0000 0064       MOV r6,r9
      MOV r6,r9
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0065      #endasm
; 0000 0066      address=address+i;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0067      boot_page_fill();
;PCODE: $00000080 VOL: 0
; 0000 0068      address=address-i;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0069     }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 006A     boot_page_ew(0x05);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 006B     wait_page_rw_ok();
;PCODE: $0000008B VOL: 0
; 0000 006C  }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;
; void quit(void)
; 0000 006F {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0070      #asm
;PCODE: $00000091 VOL: 0
; 0000 0071       jmp 0x0000
      jmp 0x0000
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0072      #endasm
; 0000 0073 }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;
;
;
;//主函数
;void main(void)
; 0000 0079 {
;PCODE: $00000096 VOL: 0
; 0000 007A   unsigned int  i=0,bufferPoint=0;
; 0000 007B   unsigned char sunny=0;
; 0000 007C 
; 0000 007D   uart_init();
;	i -> R16,R17
;	bufferPoint -> R18,R19
;	sunny -> R21
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 007E   print_face();
;PCODE: $0000009E VOL: 0
; 0000 007F 
; 0000 0080   while(!(sunny==0x20))
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0081   {
; 0000 0082    while(!(UCSR0A & 0x80))
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0083    {
; 0000 0084     UDR0   = 0x3E;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0085     delay_ms(300);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0086     UCSR0A = 0x22;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0087    }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0088   sunny=UDR0;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0089   UCSR0A = 0x22;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 008A   }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 008B   print_face();
;PCODE: $000000B6 VOL: 0
; 0000 008C 
; 0000 008D 
; 0000 008E   for(i=0;i<128;i++)
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 008F   {
; 0000 0090    while(!(UCSR0A & 0x80));
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0091    data[bufferPoint]= UDR0;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0092    bufferPoint++;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0093    UCSR0A=0x22;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0094   }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0095   write_one_page();
;PCODE: $000000D3 VOL: 0
; 0000 0096   bufferPoint=0;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0097   address += SPM_PAGESIZE;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0098 
; 0000 0099    for(i=0;i<128;i++)
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 009A   {
; 0000 009B    while(!(UCSR0A & 0x80));
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 009C    data[bufferPoint]= UDR0;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 009D    bufferPoint++;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 009E    UCSR0A=0x22;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 009F   }
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00A0   write_one_page();
;PCODE: $000000F5 VOL: 0
; 0000 00A1   bufferPoint=0;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00A2 
; 0000 00A3   UDR0   = 0x21;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00A4   delay_ms(300);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00A5   UCSR0A = 0x22;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00A6   delay_ms(3000);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00A7   quit();
;PCODE: $00000102 VOL: 0
; 0000 00A8 
; 0000 00A9 }
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
