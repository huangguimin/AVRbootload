;/*****************************************************
;采用串行接口实现Boot_load应用的实例
;华东师大电子系 马 潮 2004.07
;Compiler:    ICC-AVR 6.31
;Target:    Mega128
;Crystal:    16Mhz
;Used:        T/C0,USART0
;*****************************************************/
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;//#define UPDATE_USB      1
;
;
;
;#define SPM_PAGESIZE 256          //M128的一个Flash页为256字节(128字)
;#define BAUD 38400                //波特率采用38400bps
;#define CRYSTAL 16000000          //系统时钟16MHz
;
;//计算和定义M128的波特率设置参数
;#define BAUD_SETTING (unsigned char)((unsigned long)CRYSTAL/(16*(unsigned long)BAUD)-1)
;#define BAUD_H (unsigned char)(BAUD_SETTING>>8)
;#define BAUD_L (unsigned char)BAUD_SETTING
;#define DATA_BUFFER_SIZE SPM_PAGESIZE        //定义接收缓冲区长度
;
;//定义Xmoden控制字符
;#define XMODEM_NUL 0x00
;#define XMODEM_SOH 0x01
;#define XMODEM_STX 0x02
;#define XMODEM_EOT 0x04
;#define XMODEM_ACK 0x06
;#define XMODEM_NAK 0x15
;#define XMODEM_CAN 0x18
;#define XMODEM_EOF 0x1A
;#define XMODEM_RECIEVING_WAIT_CHAR 'C'
;
;//定义全局变量
;const uchar startupString[]="Type 'd' download, Others run app.\n\r";
;/*
;const uchar a4String1[]="AT+UART=38400,0,0\r\n\0";
;const uchar a4String2[]="AT+UART?\r\n\0";
;*/
;uchar data[DATA_BUFFER_SIZE];
;unsigned long address = 0;
;
;#pragma warn-
;//擦除(code=0x03)和写入(code=0x05)一个Flash页
;void boot_page_ew(uint p_address, uchar code)
; 0000 0032 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0033         RAMPZ = 0;
;	p_address -> Y+1
;	code -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0034 
; 0000 0035     #asm
;PCODE: $00000011 VOL: 0
; 0000 0036         ldd r30,y+1
        ldd r30,y+1
;PCODE: $00000012 VOL: 0
; 0000 0037         ldd r31,y+2
        ldd r31,y+2
;PCODE: $00000013 VOL: 0
; 0000 0038         ld r20,y
        ld r20,y
;PCODE: $00000014 VOL: 0
; 0000 0039         STS 0X68,r20
        STS 0X68,r20
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003A     #endasm
; 0000 003B     #asm("spm");                    //对指定Flash页进行操作
;PCODE: $00000017 VOL: 0
	spm
;PCODE: $00000018 VOL: 0
; 0000 003C 
; 0000 003D }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;#pragma warn+
;
;#pragma warn-
;//填充Flash缓冲页中的一个字
;void boot_page_fill(uint address,uint data)
; 0000 0043 {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0044     #asm
;	address -> Y+2
;	data -> Y+0
;PCODE: $0000001E VOL: 0
; 0000 0045         ldd r30,y+2  //Z寄存器中为缓冲页地址
        ldd r30,y+2  //Z寄存器中为缓冲页地址
;PCODE: $0000001F VOL: 0
; 0000 0046         ldd r31,y+3
        ldd r31,y+3
;PCODE: $00000020 VOL: 0
; 0000 0047         ld r0,y
        ld r0,y
;PCODE: $00000021 VOL: 0
; 0000 0048         ldd r1,y+1   //R0R1中为一个字的数据
        ldd r1,y+1   //R0R1中为一个字的数据
;PCODE: $00000022 VOL: 0
; 0000 0049         LDI r20,0x01
        LDI r20,0x01
;PCODE: $00000023 VOL: 0
; 0000 004A         STS 0X68,r20
        STS 0X68,r20
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 004B     #endasm
; 0000 004C     #asm("spm");   //将R0R1中的数据写入Z寄存器中的缓冲页地址
;PCODE: $00000026 VOL: 0
	spm
;PCODE: $00000027 VOL: 0
; 0000 004D }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;#pragma warn+
;
;#pragma warn-
;//等待一个Flash页的写完成
;void wait_page_rw_ok(void)
; 0000 0053 {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0054       while(SPMCSR & 0x40)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0055      {
; 0000 0056          while(SPMCSR & 0x01);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0057          SPMCSR = 0x11;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0058          #asm
;PCODE: $00000039 VOL: 0
; 0000 0059             spm
            spm
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 005A          #endasm
; 0000 005B      }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 005C }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;#pragma warn+
;//更新一个Flash页的完整处理
;void write_one_page(void)
; 0000 0060 {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0061     uint i;
; 0000 0062     boot_page_ew(address,0x03);                    //擦除一个Flash页
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;	i -> R16,R17
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0063     wait_page_rw_ok();                            //等待擦除完成
;PCODE: $00000049 VOL: 0
; 0000 0064     for(i=0;i<SPM_PAGESIZE;i+=2)                //将数据填入Flash缓冲页中
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0065     {
; 0000 0066         boot_page_fill(i, (data[i]|((uint)(data[i+1])<<8)));
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0067     }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0068     boot_page_ew(address,0x05);                    //将缓冲页数据写入一个Flash页
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0069     wait_page_rw_ok();                            //等待写入完成
;PCODE: $0000006A VOL: 0
; 0000 006A }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;//从RS232发送一个字节
;void uart_putchar(uchar c)
; 0000 006D {
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 006E     while(!(UCSR0A & 0x20));
;	c -> Y+0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 006F     UDR0 = c;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0070 }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;void USART_Send_string(flash uchar *data)
; 0000 0073 {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0074     uint i = 0;
; 0000 0075     while(data[i] != '\0')
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;	*data -> Y+2
;	i -> R16,R17
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0076     uart_putchar(data[i++]);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0077 }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;//从RS232接收一个字节
;int uart_getchar(void)
; 0000 007A {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 007B     unsigned char status,res;
; 0000 007C     if(!(UCSR0A & 0x80)) return -1;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;	status -> R17
;	res -> R16
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 007D     status = UCSR0A;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 007E     res = UDR0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 007F     if (status & 0x1c) return -1;        // If error, return -1
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0080     return res;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0081 }
;PCODE: $000000B3 VOL: 0
;//等待从RS232接收一个有效的字节
;uchar uart_waitchar(void)
; 0000 0084 {
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0085     int c;
; 0000 0086     do
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;	c -> R16,R17
;PCODE: $000000B8 VOL: 0
; 0000 0087     {
; 0000 0088         c=uart_getchar();
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0089     }
; 0000 008A     while(c==-1);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 008B     return (uchar)c;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 008C }
;PCODE: $000000C4 VOL: 0
;//计算CRC
;uint calcrc(uchar *ptr, uchar count)
; 0000 008F {
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0090     uint recalcrc = 0;
; 0000 0091     uchar i,j = 0;
; 0000 0092 
; 0000 0093     while (count >= ++j)
;PCODE: $000000C7 VOL: 0
;	*ptr -> Y+5
;	count -> Y+4
;	recalcrc -> R16,R17
;	i -> R19
;	j -> R18
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0094     {
; 0000 0095         recalcrc = recalcrc ^ (uint)*ptr++ << 8;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0096         i = 8;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0097         do
;PCODE: $000000DA VOL: 0
; 0000 0098         {
; 0000 0099             if (recalcrc & 0x8000)
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 009A                 recalcrc = recalcrc << 1 ^ 0x1021;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 009B             else
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 009C                 recalcrc = recalcrc << 1;
;PCODE: $000000E5 VOL: 0
; 0000 009D         }while(--i);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 009E     }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 009F     return recalcrc;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00A0 }
;PCODE: $000000F4 VOL: 0
;
;#ifdef  UPDATE_USB
;//----------------------------------------------U盘模式-----------------------------------------------------------------
;
;/* 附加的USB操作状态定义 */
;#define		ERR_USB_UNKNOWN		0xFA	/* 未知错误,不应该发生的情况,需检查硬件或者程序错误 */
;#define		TRUE	1
;#define		FALSE	0
;#define	SER_SYNC_CODE1		0x57			/* 启动操作的第1个串口同步码 */
;#define	SER_SYNC_CODE2		0xAB			/* 启动操作的第2个串口同步码 */
;#define	CMD01_GET_STATUS	0x22			/* 获取中断状态并取消中断请求 */
;#define	CMD0H_DISK_CONNECT	0x30			/* 主机文件模式/不支持SD卡: 检查磁盘是否连接 */
;#define	CMD0H_DISK_MOUNT	0x31			/* 主机文件模式: 初始化磁盘并测试磁盘是否就绪 */
;
;/************串口1发送一个数据********************/
;
;void USART_Send_word_1(uchar data)
;{
;    while (!(UCSR1A & (1<<UDRE1)));        //等待发送缓冲器为空；
;    UDR1 = data;        //将数据放入缓冲器，发送数据；
;}
;
;uchar USART_Receive_1(void)
;{
;// 等待接收数据
;    uint i = 0;
;    while(!(UCSR1A & (1<<RXC1))){if((++i)>65530)return 0;};
;    return UDR1;
;}
;/*
;void USART_Send_string_1(uchar *data,uchar length)
;{
;    uchar i;
;   for(i = 0; i < length; i++)
;    USART_Send_word_1(data[i]);
;}*/
;
;void xWriteCH376Cmd(uchar mCmd)  /* 向CH376写命令 */
;{
;	USART_Send_word_1(SER_SYNC_CODE1);
;    USART_Send_word_1(SER_SYNC_CODE2);  /* 启动操作的第2个串口同步码 */
;	USART_Send_word_1(mCmd);  /* 串口输出 */
;}
;
;void xWriteCH376Data(uchar mData)  /* 向CH376写数据 */
;{
;	USART_Send_word_1(mData);  /* 串口输出 */
;}
;
;uchar xReadCH376Data( void )  /* 从CH376读数据 */
;{
;	return USART_Receive_1();  /* 串口输入 */
;}
;
;uchar CH376GetIntStatus( void )  /* 获取中断状态并取消中断请求 */
;{
;	uchar	s;
;	xWriteCH376Cmd(CMD01_GET_STATUS);
;	s = xReadCH376Data();
;	return(s);
;}
;
;uchar Wait376Interrupt(void)  /* 等待CH376中断(INT#低电平)，返回中断状态码, 超时则返回ERR_USB_UNKNOWN */
;{
;	long	i;
;	for( i = 0; i < 5000000; i ++ ) {  /* 计数防止超时,默认的超时时间,与单片机主频有关 */
;		if(USART_Receive_1()) return(CH376GetIntStatus( ));  /* 检测到中断 */
;/* 在等待CH376中断的过程中,可以做些需要及时处理的其它事情 */
;	}
;	return(ERR_USB_UNKNOWN);  /* 不应该发生的情况 */
;}
;
;uchar CH376SendCmdWaitInt(uchar mCmd)  /* 发出命令码后,等待中断 */
;{
;	xWriteCH376Cmd(mCmd);
;	return Wait376Interrupt();
;}
;
;/* 查询CH376中断(INT#低电平) */
;uchar Query376Interrupt(void)
;{
;    return USART_Receive_1();
;}
;
;uchar CH376DiskConnect(void)/*检查U盘是否连接*/
;{
;    if (Query376Interrupt( )) CH376GetIntStatus( );  /* 检测到中断 */
;    return(CH376SendCmdWaitInt(CMD0H_DISK_CONNECT));
;}
;#define	CMD50_WRITE_VAR32	0x0D			/* 设置指定的32位文件系统变量 */
;void CH376WriteVar32(uchar var, unsigned long dat )  /* 写CH376芯片内部的32位变量 */
;{
;	xWriteCH376Cmd(CMD50_WRITE_VAR32);
;	xWriteCH376Data(var);
;	xWriteCH376Data((uchar)dat);
;	xWriteCH376Data((uchar)((uint)dat >> 8));
;	xWriteCH376Data((uchar)(dat >> 16));
;	xWriteCH376Data((uchar)(dat >> 24));
;}
;
;
;uchar CH376DiskMount(void)  /* 初始化磁盘并测试磁盘是否就绪 */
;{
;	return(CH376SendCmdWaitInt(CMD0H_DISK_MOUNT));
;}
;#define	CMD10_SET_FILE_NAME	0x2F			/* 主机文件模式: 设置将要操作的文件的文件名 */
;#define	DEF_SEPAR_CHAR1		0x5C			/* 路径名的分隔符 '\' */
;#define	DEF_SEPAR_CHAR2		0x2F			/* 路径名的分隔符 '/' */
;#define	VAR_CURRENT_CLUST	0x64			/* 当前文件的当前簇号(总长度32位,低字节在前) */
;#define	CMD0H_FILE_OPEN		0x32			/* 主机文件模式: 打开文件或者目录(文件夹),或者枚举文件和目录(文件夹) */
;
;uchar CH376FileOpen(uchar * name)  /* 在根目录或者当前目录下打开文件或者目录(文件夹) */
;{
;   /* 设置将要操作的文件的文件名 */
;   	uchar	c;
;	xWriteCH376Cmd( CMD10_SET_FILE_NAME );
;	c = *name;
;	xWriteCH376Data(c);
;	while (c)
;    {
;		name++;
;		c = *name;
;		if (c == DEF_SEPAR_CHAR1 || c == DEF_SEPAR_CHAR2) c = 0;  /* 强行将文件名截止 */
;		xWriteCH376Data(c);
;	}
;	if (name[0] == DEF_SEPAR_CHAR1 || name[0] == DEF_SEPAR_CHAR2) CH376WriteVar32( VAR_CURRENT_CLUST, 0 );
;	return(CH376SendCmdWaitInt(CMD0H_FILE_OPEN));
;}
;
;#define	CMD1H_FILE_CLOSE	0x36			/* 主机文件模式: 关闭当前已经打开的文件或者目录(文件夹) */
;uchar CH376FileClose(uchar UpdateSz)  /* 关闭当前已经打开的文件或者目录(文件夹) */
;{
;    xWriteCH376Cmd(CMD1H_FILE_CLOSE);
;	xWriteCH376Data(UpdateSz);
;	return(Wait376Interrupt());
;}
;
;#define	CMD01_RD_USB_DATA0	0x27			/* 从当前USB中断的端点缓冲区或者主机端点的接收缓冲区读取数据块 */
;uchar CH376ReadBlock(uchar * buf)  /* 从当前主机端点的接收缓冲区读取数据块,返回长度 */
;{
;	uchar s, l;
;	xWriteCH376Cmd(CMD01_RD_USB_DATA0);
;	s = l = xReadCH376Data( );  /* 长度 */
;	if(l)
;    {
;		do {
;			*buf = xReadCH376Data( );
;			buf ++;
;		} while ( -- l );
;	}
;	return( s );
;}
;
;#define	CMD2H_BYTE_READ		0x3A			/* 主机文件模式: 以字节为单位从当前位置读取数据块 */
;#define	USB_INT_DISK_READ	0x1D			/* USB存储器请求数据读出 */
;#define	CMD0H_BYTE_RD_GO	0x3B			/* 主机文件模式: 继续字节读 */
;uchar CH376ByteRead(uchar * buf, uint ReqCount, uint * RealCount )  /* 以字节为单位从当前位置读取数据块 */
;{
;	uchar	s;
;	xWriteCH376Cmd(CMD2H_BYTE_READ);
;	xWriteCH376Data((uchar)ReqCount);
;	xWriteCH376Data((uchar)(ReqCount>>8));
;	if (RealCount) *RealCount = 0;
;	while ( 1 )
;    {
;		s = Wait376Interrupt( );
;		if (s == USB_INT_DISK_READ)
;        {
;			s = CH376ReadBlock(buf);  /* 从当前主机端点的接收缓冲区读取数据块,返回长度 */
;			xWriteCH376Cmd(CMD0H_BYTE_RD_GO);
;			buf += s;
;			if (RealCount) *RealCount += s;
;		}
;		else return(s);  /* 错误 */
;	}
;}
;
;
;unsigned long CH376Read32bitDat( void )  /* 从CH376芯片读取32位的数据并结束命令 */
;{
;	uchar	c0, c1, c2, c3;
;	c0 = xReadCH376Data( );
;	c1 = xReadCH376Data( );
;	c2 = xReadCH376Data( );
;	c3 = xReadCH376Data( );
;	return(((unsigned long)c3 << 24) | ((unsigned long)c2 << 16) | ((unsigned long)c1 << 8) | c0 );
;}
;
;#define	CMD14_READ_VAR32	0x0C			/* 读取指定的32位文件系统变量 */
;unsigned long CH376ReadVar32(uchar var)  /* 读CH376芯片内部的32位变量 */
;{
;	xWriteCH376Cmd(CMD14_READ_VAR32);
;	xWriteCH376Data(var);
;	return(CH376Read32bitDat( ) );  /* 从CH376芯片读取32位的数据并结束命令 */
;}
;
;#define	VAR_FILE_SIZE		0x68			/* 当前文件的长度(总长度32位,低字节在前) */
;unsigned long CH376GetFileSize(void)  /* 读取当前文件长度 */
;{
;	return(CH376ReadVar32(VAR_FILE_SIZE));
;}
;//--------------------------------------------------END--------------------------------------------------------------
;#endif
;//退出Bootloader程序，从0x0000处执行应用程序
;void quit(void)
; 0000 016E {
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 016F       uart_putchar('O');uart_putchar('K');
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0170       uart_putchar(0x0d);uart_putchar(0x0a);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0171      while(!(UCSR0A & 0x20));            //等待结束提示信息回送完成
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0172      MCUCR = 0x01;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0173      MCUCR = 0x00;                    //将中断向量表迁移到应用程序区头部
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0174      RAMPZ = 0x00;                    //RAMPZ清零初始化
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0175      #asm("jmp 0x0000")        //跳转到Flash的0x0000处，执行用户的应用程序
;PCODE: $0000010F VOL: 0
	jmp 0x0000
;PCODE: $00000110 VOL: 0
; 0000 0176 }
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;
;
;#define	CMD11_CHECK_EXIST	0x06			/* 测试通讯接口和工作状态 */
;#define	CMD11_SET_USB_MODE	0x15			/* 设置USB工作模式 */
;#define	CMD_RET_SUCCESS		0x51			/* 命令操作成功 */
;#define	CMD_RET_ABORT		0x5F			/* 命令操作失败 */
;#define	USB_INT_SUCCESS		0x14			/* USB事务或者传输操作成功 */
;#define	ERR_MISS_FILE		0x42			/* 指定路径的文件没有找到,可能是文件名称错误 */
;//主程序
;void main(void)
; 0000 0181 {
;PCODE: $00000113 VOL: 0
; 0000 0182     uint i = 0;
; 0000 0183     uint timercount = 0;
; 0000 0184     uchar packNO = 1;
; 0000 0185     uint bufferPoint = 0;
; 0000 0186     uint crc;
; 0000 0187 #ifdef  UPDATE_USB
; 0000 0188     uchar s;
; 0000 0189     uint j;
; 0000 018A     unsigned long UpdateSize = 0;
; 0000 018B     uint LabCount = 0,lastdatanum = 0;
; 0000 018C     uchar string[50] = {0};
; 0000 018D #endif
; 0000 018E 
; 0000 018F //初始化M128的USART0
; 0000 0190     UBRR0L = BAUD_L;            //Set baud rate
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;	i -> R16,R17
;	timercount -> R18,R19
;	packNO -> R21
;	bufferPoint -> Y+2
;	crc -> Y+0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0191     UBRR0H = BAUD_H;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0192     UCSR0B = ((1<<RXEN0)|(1<<TXEN0));        //接收器与发送器使能；
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0193     UCSR0C = (1<<USBS0)|(3<<UCSZ00);        //设置帧格式: 8 个数据位, 1 个停止位；
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0194 #ifdef  UPDATE_USB
; 0000 0195 //初始化M128的USART1
; 0000 0196     UBRR1L = 8;
; 0000 0197     UBRR1H = 0;
; 0000 0198     UCSR1B = ((1<<RXEN1)|(1<<TXEN1));        //接收器与发送器使能；
; 0000 0199     UCSR1C = (1<<USBS1)|(3<<UCSZ10);        //设置帧格式: 8 个数据位, 1 个停止位；
; 0000 019A #endif
; 0000 019B //初始化M128的T/C0，15ms自动重载
; 0000 019C     OCR0 = 0x75;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 019D     TCCR0 = 0x0F;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 019E     TCNT0 = 0;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 019F 
; 0000 01A0     DDRB.0 = 1;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 01A1     PORTB.0 = 1;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 01A2     /*
; 0000 01A3     USART_Send_string(a4String1);
; 0000 01A4     while(uart_getchar()!='O');
; 0000 01A5     while(uart_getchar()!='K');
; 0000 01A6     USART_Send_string(a4String2);
; 0000 01A7     while(uart_getchar()!='O');
; 0000 01A8     while(uart_getchar()!='K');
; 0000 01A9     */
; 0000 01AA     USART_Send_string(startupString);//向PC机发送开始提示信息
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 01AB     while(1)
;PCODE: $00000134 VOL: 0
; 0000 01AC     {
; 0000 01AD         if(uart_getchar()=='d')break;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 01AE         if(TIFR&0x02)
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 01AF         {
; 0000 01B0             if(++timercount>500) //若没有进入串口升级模式，则进入U盘升级模式 200*15ms=3s
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 01B1             {
; 0000 01B2 #ifdef  UPDATE_USB
; 0000 01B3 
; 0000 01B4                 sprintf((char*)string,"Enter the USB_Disk Update!\n",UpdateSize);
; 0000 01B5                 USART_Send_string(string);
; 0000 01B6                 //++++++++++++++++初始化CH376S++++++++++++++++++++++++
; 0000 01B7                 //CH376_PORT_INIT( );  /* 接口硬件初始化 */
; 0000 01B8 	            xWriteCH376Cmd(CMD11_CHECK_EXIST);  /* 测试单片机与CH376之间的通讯接口 */
; 0000 01B9 	            xWriteCH376Data(0x65);
; 0000 01BA 	            s = xReadCH376Data( );
; 0000 01BB 	            if (s != 0x9A)
; 0000 01BC                     uart_putchar(ERR_USB_UNKNOWN);  /* 通讯接口不正常,可能原因有:接口连接异常,其它设备影响(片选不唯一),串口波特率,一直在复位,晶振不工作 */
; 0000 01BD 	            xWriteCH376Cmd(CMD11_SET_USB_MODE);  /* 设备USB工作模式 */
; 0000 01BE 	            xWriteCH376Data(0x06);
; 0000 01BF 	            s = xReadCH376Data( );
; 0000 01C0 	            if (s != CMD_RET_SUCCESS)
; 0000 01C1                 {
; 0000 01C2                     sprintf((char*)string,"USB_Disk is wrong init!\n",UpdateSize);
; 0000 01C3                     USART_Send_string(string);
; 0000 01C4                     quit();
; 0000 01C5                 }
; 0000 01C6                 //++++++++++++++++++++++END+++++++++++++++++++++++++++++++++
; 0000 01C7                 //检查U盘是否连接好
; 0000 01C8                 i = 0;
; 0000 01C9                 while(CH376DiskConnect() != USB_INT_SUCCESS)
; 0000 01CA                 {
; 0000 01CB                     if(++i > 5)
; 0000 01CC                     {
; 0000 01CD                         sprintf((char*)string,"USB_Disk is not Connection!\n",UpdateSize);
; 0000 01CE                         USART_Send_string(string);
; 0000 01CF                         quit();
; 0000 01D0                     }
; 0000 01D1                     delay_ms(100);
; 0000 01D2                 }
; 0000 01D3                 i = 0;
; 0000 01D4                 // 对于检测到USB设备的,最多等待10*50mS
; 0000 01D5                 if(CH376DiskMount() != USB_INT_SUCCESS)
; 0000 01D6                 {
; 0000 01D7                     if(++i > 5)
; 0000 01D8                     {
; 0000 01D9                         sprintf((char*)string,"USB_Disk Test Wrong!\n",UpdateSize);
; 0000 01DA                         USART_Send_string(string);
; 0000 01DB                         quit();
; 0000 01DC                     }
; 0000 01DD                     delay_ms(100);
; 0000 01DE                 }
; 0000 01DF                 //打开升级文件
; 0000 01E0                 s = CH376FileOpen("J8A-1.U");//每台机子，对应升级文件。
; 0000 01E1                 if (s == ERR_MISS_FILE) //没有找到升级文件则退出
; 0000 01E2                 {
; 0000 01E3                     CH376FileClose(TRUE);
; 0000 01E4                     sprintf((char*)string,"I can't fined the Update_File!\n",UpdateSize);
; 0000 01E5                     USART_Send_string(string);
; 0000 01E6                     quit();
; 0000 01E7                 }
; 0000 01E8                 UpdateSize = CH376GetFileSize();
; 0000 01E9                 sprintf((char*)string,"The Update_File size is :%dl\n",UpdateSize);
; 0000 01EA                 USART_Send_string(string);
; 0000 01EB 
; 0000 01EC                 LabCount = UpdateSize/SPM_PAGESIZE;
; 0000 01ED                 lastdatanum = UpdateSize%SPM_PAGESIZE;
; 0000 01EE                 if(lastdatanum)
; 0000 01EF                     LabCount++;
; 0000 01F0                 if(LabCount > (512-32))//mega128的flash页数
; 0000 01F1                 {
; 0000 01F2                     sprintf((char*)string,"The Update_File size is too big!",UpdateSize);
; 0000 01F3                     USART_Send_string(string);
; 0000 01F4                     CH376FileClose(FALSE);
; 0000 01F5                     quit();
; 0000 01F6                 }
; 0000 01F7                 //读取升级文件数据
; 0000 01F8                 for(i = 0; i < LabCount; i++)
; 0000 01F9                 {
; 0000 01FA 
; 0000 01FB                     if(lastdatanum && (i == (LabCount - 1)))
; 0000 01FC                     {
; 0000 01FD                         CH376ByteRead(data, lastdatanum, NULL);
; 0000 01FE                         for(j = lastdatanum; j < SPM_PAGESIZE; j++)
; 0000 01FF                             data[j] = 0xFF;
; 0000 0200                     }
; 0000 0201                     else
; 0000 0202                         CH376ByteRead(data, SPM_PAGESIZE, NULL);
; 0000 0203                     write_one_page();
; 0000 0204                     address = address + SPM_PAGESIZE;    //Flash页加1
; 0000 0205                 }
; 0000 0206                 //write_one_page();         //收到256字节写入一页Flash中
; 0000 0207                 //address = address + SPM_PAGESIZE;    //Flash页加1
; 0000 0208                 //关闭文件
; 0000 0209                 CH376FileClose(FALSE);
; 0000 020A #endif
; 0000 020B                 quit();
;PCODE: $00000143 VOL: 0
; 0000 020C             }
; 0000 020D             TIFR=TIFR|0x02;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 020E         }
; 0000 020F     }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0210     //每秒向PC机发送一个控制字符"C"，等待控制字〈soh〉
; 0000 0211     while(uart_getchar()!= XMODEM_SOH)        //receive the start of Xmodem
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0212     {
; 0000 0213          if(TIFR & 0x02)              //timer0 over flow
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0214         {
; 0000 0215             if(++timercount > 100)                   //wait about 1 second
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0216             {
; 0000 0217                 uart_putchar(XMODEM_RECIEVING_WAIT_CHAR);   //send a "C"
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0218                 timercount = 0;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0219             }
; 0000 021A             TIFR = TIFR&0x02;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 021B         }
; 0000 021C     }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 021D     //开始接收数据块
; 0000 021E     do
;PCODE: $00000164 VOL: 0
; 0000 021F     {
; 0000 0220         if ((packNO == uart_waitchar()) && (packNO ==(~uart_waitchar())))
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0221         {    //核对数据块编号正确
; 0000 0222             for(i=0;i<128;i++)             //接收128个字节数据
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0223             {
; 0000 0224                 data[bufferPoint]= uart_waitchar();
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0225                 bufferPoint++;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0226             }
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0227             crc = (uint)(uart_waitchar())<<8;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0228             crc = crc | uart_waitchar();        //接收2个字节的CRC效验字
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0229             if(calcrc(&data[bufferPoint-128],128) == crc)    //CRC校验验证
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 022A             {    //正确接收128个字节数据
; 0000 022B                 while(bufferPoint >= SPM_PAGESIZE)
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 022C                 {    //正确接受256个字节的数据
; 0000 022D                     write_one_page();         //收到256字节写入一页Flash中
;PCODE: $0000019E VOL: 0
; 0000 022E                     address = address + SPM_PAGESIZE;    //Flash页加1
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 022F                     bufferPoint = 0;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0230                 }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0231                 uart_putchar(XMODEM_ACK);      //正确收到一个数据块
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0232                 packNO++;                      //数据块编号加1
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0233             }
; 0000 0234             else
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0235             {
; 0000 0236                 uart_putchar(XMODEM_NAK);     //要求重发数据块
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0237             }
;PCODE: $000001B0 VOL: 0
; 0000 0238         }
; 0000 0239         else
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 023A         {
; 0000 023B             uart_putchar(XMODEM_NAK);           //要求重发数据块
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 023C         }
;PCODE: $000001B6 VOL: 0
; 0000 023D     }while(uart_waitchar()!=XMODEM_EOT);          //循环接收，直到全部发完
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 023E     uart_putchar(XMODEM_ACK);                    //通知PC机全部收到
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 023F 
; 0000 0240     if(bufferPoint) write_one_page();        //把剩余的数据写入Flash中
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0241     quit();                //退出Bootloader程序，从0x0000处执行应用程序
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0242 }
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
